{"ast":null,"code":"var _jsxFileName = \"/Users/iviswa948/ReactJs/REACT/TSX - SEARCH PROJECT/search-app/src/components/ErrorComponent.tsx\";\nimport React, { Component } from 'react';\nimport logo from '../components/NoRecordFound.png'; // Class compnenet which extends react component\n\nclass ErrorComponent extends Component {\n  render() {\n    // have to implement render() method in class componenet which will return some HTML or null\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      alt: \"\",\n      src: logo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default ErrorComponent; /// functional components\n// simple functions receiving props and declartion \n// use as much as possible always go with functionl components \n// Absence of 'this' keyword\n// so we don't have state  and we have to work \n// no complicated logic resuable for UI\n/// JSX or TSX\n// Javascript XML / TypeScript XML\n// it has tag name , attribute and childeren\n// jsx / tsx make simple and eligant \n// jsx / tsx transpiles to pure js to understand browser\n// Class -> className\n// for -> htmlFor\n// camel case property naming convetion ( onclick -> onClick)\n// jsx should contain only one wrapper tag\n/// Hooks React 16.7.0 above \n// New feature but not break any exisiting feautre backward compatible\n// state,lifecycle and \"this\" binding can be solved with hooks\n/// class component\n// maintain their own private data - state\n// complex UI logic\n// provide lifecycle hooks\n// its not regular HTML its JSX or TSX\n/// props vs state\n// props get passed to the component || state managed within component\n// funciton parameter || variales declared within function body\n// props are immutable -> cannot changed by children || state can be changed - component full control to change the state\n// props - functional / this.props - class  || useState (Hook)functional / this.state - class component\n// this.state is used inside the constructor for state to declare and useage will be this.state.state key\n// destructing props in function & class ( const {v1,v2}= this.props)\n// destructing state in function & class ( const {v1,v2}= this.state)\n/// virtual DOM\n// create whole copy of DOM ( virtual DOM or React Dom) from original DOM \n// updated virtual DOM checks with virtual DOM  and changes will then occur in actual DOM\n/// setState\n// never modify the state object directly\n// changes of the state object should be under setState method\n// setState has two param 1.state object , 2.call back function which will be arrow function\n///Life Cycle (1.Mounting 2.Updating 3.UnMouting)\n/// Mounting\n// constructor(1)() -> first call automaticall it will run \n// to initial the state and bind the method we use construtor\n// we have to pass the props in the constructor\n// we have to call the super with props \n// constructor(props){\n//     super(props);\n// }\n// we have to initate the parent class construtor thats why we call super (props)\n// this method called only once and used a lot\n// should not do any api call ( inifinte loop occurs )\n/// getDerivedStateFromProps(props, state)(2)\n// if we want to set from property to state we use this method\n// its a static method we wont get components instance \n// but we can return state object\n// called every time when ever index.js changes we get state and props as property\n// this method is not used mostly \n// should not do any api call ( inifinte loop occurs )\n/// render(3)\n// render the JSX\n// mandotary method in react \n// it will return react element with jsx and the conversion will be done by React component\n// should not do any api call ( inifinte loop occurs )\n/// componenetDidMount(4)\n// checks componenet mounted or not\n// we can have setState calling , api calling best place\n// shouldcomponenetupdate()","map":{"version":3,"sources":["/Users/iviswa948/ReactJs/REACT/TSX - SEARCH PROJECT/search-app/src/components/ErrorComponent.tsx"],"names":["React","Component","logo","ErrorComponent","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,iCAAjB,C,CAEA;;AACA,MAAMC,cAAN,SAA6BF,SAA7B,CAAuC;AACnCG,EAAAA,MAAM,GAAG;AAAE;AACP,wBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,GAAG,EAAC,EAAT;AAAY,MAAA,GAAG,EAAEF,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAPkC;;AAWvC,eAAeC,cAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import React, { Component } from 'react'\nimport logo from '../components/NoRecordFound.png'\n\n// Class compnenet which extends react component\nclass ErrorComponent extends Component {\n    render() { // have to implement render() method in class componenet which will return some HTML or null\n        return (\n            <React.Fragment>\n                <img alt=\"\" src={logo} />\n            </React.Fragment>\n        )\n    }\n\n}\n\nexport default ErrorComponent\n\n/// functional components\n// simple functions receiving props and declartion \n// use as much as possible always go with functionl components \n// Absence of 'this' keyword\n// so we don't have state  and we have to work \n// no complicated logic resuable for UI\n\n/// JSX or TSX\n// Javascript XML / TypeScript XML\n// it has tag name , attribute and childeren\n// jsx / tsx make simple and eligant \n// jsx / tsx transpiles to pure js to understand browser\n// Class -> className\n// for -> htmlFor\n// camel case property naming convetion ( onclick -> onClick)\n// jsx should contain only one wrapper tag\n\n\n/// Hooks React 16.7.0 above \n// New feature but not break any exisiting feautre backward compatible\n// state,lifecycle and \"this\" binding can be solved with hooks\n\n/// class component\n// maintain their own private data - state\n// complex UI logic\n// provide lifecycle hooks\n// its not regular HTML its JSX or TSX\n\n\n/// props vs state\n// props get passed to the component || state managed within component\n// funciton parameter || variales declared within function body\n// props are immutable -> cannot changed by children || state can be changed - component full control to change the state\n// props - functional / this.props - class  || useState (Hook)functional / this.state - class component\n// this.state is used inside the constructor for state to declare and useage will be this.state.state key\n// destructing props in function & class ( const {v1,v2}= this.props)\n// destructing state in function & class ( const {v1,v2}= this.state)\n\n/// virtual DOM\n// create whole copy of DOM ( virtual DOM or React Dom) from original DOM \n// updated virtual DOM checks with virtual DOM  and changes will then occur in actual DOM\n\n\n/// setState\n// never modify the state object directly\n// changes of the state object should be under setState method\n// setState has two param 1.state object , 2.call back function which will be arrow function\n\n\n///Life Cycle (1.Mounting 2.Updating 3.UnMouting)\n/// Mounting\n// constructor(1)() -> first call automaticall it will run \n// to initial the state and bind the method we use construtor\n// we have to pass the props in the constructor\n// we have to call the super with props \n// constructor(props){\n//     super(props);\n// }\n// we have to initate the parent class construtor thats why we call super (props)\n// this method called only once and used a lot\n// should not do any api call ( inifinte loop occurs )\n\n\n/// getDerivedStateFromProps(props, state)(2)\n// if we want to set from property to state we use this method\n// its a static method we wont get components instance \n// but we can return state object\n// called every time when ever index.js changes we get state and props as property\n// this method is not used mostly \n// should not do any api call ( inifinte loop occurs )\n\n/// render(3)\n// render the JSX\n// mandotary method in react \n// it will return react element with jsx and the conversion will be done by React component\n// should not do any api call ( inifinte loop occurs )\n\n/// componenetDidMount(4)\n// checks componenet mounted or not\n// we can have setState calling , api calling best place\n\n// shouldcomponenetupdate()\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}